package classe;

import java.awt.Color;
import java.awt.Component;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JViewport;
import views.JFRegisterUser;

/**
 * Componentes utilizaveis nesta classe:
 * 
 * 1 - JCheckBox;
 * 2 - JComboBox;
 * 3 - JFormattedTextField;
 * 4 - JPasswordField;
 * 5 - JRadioButton;
 * 6 - JScrollPane;
 * 7 - JSpinner;
 * 8 - JTextArea;
 * 9 - JTextField;
 * 
 * @author Aldair Natan
 */

public class GetValuesFromJPanel {

    //Atribudo Object que será retornado ao final da execução do metodo. como objeto da classe.
    private Object classe;
    //Receberá os atributos da classe passada por parâmetro
    private Field[] fields;
    //Receberá os metodos da classe passada por parametro
    private Method[] methods;

    /**
     *
     * @param panel - dentro deste JPanel contem TextFields, ele será varrido
     * até encontrar todos campos que tem nome igual ao atributo da classe
     * passada por parametro (nomeClasse).
     * @param nomeClasse - String que contém o nome da classe a ser instanciada
     * para executar os metodos SETTER para possivel cadastro.
     *
     * @return um Object da classe passada por parametro.
     */
    public Object pega(JPanel panel, String nomeClasse) {
        try {

            //Instancia a Classe passada por parãmetro
            classe = retornaClasse(nomeClasse);

            //Obtem todos os atributos da classe
            fields = classe.getClass().getDeclaredFields();

            //obtem todos os metodos da Classe
            methods = classe.getClass().getDeclaredMethods();

            //obtem todos os componentes de tela do Painel Passado por parametro
            Component[] components = panel.getComponents();

            for (int i = 0; i < components.length; i++) {
                //verifica se é instancia de JTextField
                if (components[i] instanceof JTextField) {
                    getValueJTextField(components[i]);
                } else if (components[i] instanceof JScrollPane) {
                    getValueJTextArea(components[i]);
                } else if (components[i] instanceof JRadioButton) {
                    getSelectedRadioButton(components[i]);
                }else if(components[i] instanceof JComboBox){
                    getSelectedComboBox(components[i]);
                }else if(components[i] instanceof JFormattedTextField){
                    getValueFormatText(components[i]);
                }else if(components[i] instanceof JPasswordField){
                    getValuePassword(components[i]);
                }else if(components[i] instanceof JSpinner){
                    getValueSpinner(components[i]);
                }else if(components[i] instanceof JCheckBox){
                    getSelectedCheckBox(components[i]);
                }
            }
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(JFRegisterUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(JFRegisterUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(JFRegisterUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(JFRegisterUser.class.getName()).log(Level.SEVERE, null, ex);
        }

        //retorna um objeto da classe passada por parâmetro
        return classe;
    }

    public void getSelectedCheckBox(Component component) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
        JCheckBox checkbox = (JCheckBox) component;
        int controlador = 0;
        for (Field field : fields) {
            if (checkbox.getName().equals(field.getName()) && checkbox.isSelected()) {
                String nomeAtributo = field.getName();
                for (Method method : methods) {
                    if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                        Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                        metodo.invoke(classe, checkbox.getActionCommand());
                        controlador = 1;
                        break;
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }
    
    public void getValueSpinner(Component component) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException{
        JSpinner spinner = (JSpinner) component;
        int controlador = 0;
        for (Field field : fields) {
            if (spinner.getName().equals(field.getName())) {
                String nomeAtributo = field.getName();
                for (Method method : methods) {
                    if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                        Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                        metodo.invoke(classe, spinner.getValue());
                        controlador = 1;
                        break;
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }
    
    private void getValuePassword(Component component) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        JPasswordField text = (JPasswordField) component;
        int controlador = 0;
        for (Field field : fields) {
            if (text.getName().equals(field.getName())) {
                String nomeAtributo = field.getName();
                for (Method method : methods) {
                    if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                        Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                        metodo.invoke(classe, text.getText());
                        controlador = 1;
                        break;
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }
    
    public void getValueFormatText(Component component) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
        JFormattedTextField text = (JFormattedTextField) component;
        int controlador = 0;
        for (Field field : fields) {
            if (text.getName().equals(field.getName())) {
                String nomeAtributo = field.getName();
                for (Method method : methods) {
                    if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                        Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                        metodo.invoke(classe, text.getText());
                        controlador = 1;
                        break;
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }
    
    public void getSelectedComboBox(Component component) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
        JComboBox comboBox = (JComboBox) component;
        int controlador = 0;
        for (Field field : fields) {
            if (comboBox.getName().equals(field.getName()) && comboBox.getSelectedIndex() != 0 ) {
                String nomeAtributo = field.getName();
                for (Method method : methods) {
                    if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                        Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                        metodo.invoke(classe, comboBox.getSelectedItem());
                        controlador = 1;
                        break;
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }    
    public void getSelectedRadioButton(Component component) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        JRadioButton radioButton = (JRadioButton) component;
        int controlador = 0;
        for (Field field : fields) {
            if (radioButton.getName().equals(field.getName()) && !radioButton.getName().equals("") && radioButton.isSelected() == true) {
                String nomeAtributo = field.getName();
                for (Method method : methods) {
                    if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                        Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                        metodo.invoke(classe, radioButton.getActionCommand());
                        controlador = 1;
                        break;
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }

    public void getValueJTextField(Component component) throws IllegalAccessException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException {
        JTextField text = (JTextField) component;
        int controlador = 0;
        for (Field field : fields) {
            if (text.getName().equals(field.getName())) {
                String nomeAtributo = field.getName();
                for (Method method : methods) {
                    if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                        Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                        metodo.invoke(classe, text.getText());
                        controlador = 1;
                        break;
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }

    public void getValueJTextArea(Component component) throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {

        JScrollPane scrollPane = (JScrollPane) component;
        JTextArea text;
        int controlador = 0;
        Component c[] = scrollPane.getComponents();

        for (Component c1 : c) {
            if (c1 instanceof JViewport) {
                JViewport v = (JViewport) c1;
                if (v.getComponent(0) instanceof JTextArea) {
                    text = (JTextArea) v.getComponent(0);

                    for (Field field : fields) {
                        if (text.getName().equals(field.getName())) {
                            String nomeAtributo = field.getName();
                            for (Method method : methods) {
                                if (method.getName().equals("set" + primeiraMaiuscula(nomeAtributo))) {
                                    Method metodo = classe.getClass().getMethod("set" + primeiraMaiuscula(nomeAtributo), method.getParameterTypes());
                                    metodo.invoke(classe, text.getText());
                                    controlador = 1;
                                    break;
                                }
                            }
                        }
                        if (controlador == 1) {
                            break;
                        }
                    }
                }
            }
            if (controlador == 1) {
                break;
            }
        }
    }

    
    public static String primeiraMaiuscula(String palavra) {
        return palavra.substring(0, 1).toUpperCase() + palavra.substring(1);
    }

    public Object retornaClasse(String nomeClasse) {
        try {
            return (Class.forName("classe." + nomeClasse)).newInstance();
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
}
